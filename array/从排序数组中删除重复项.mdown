### 题目
 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
 示例 2:
 > 给定 nums = [0,0,1,1,1,2,2,3,3,4],
 > 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
 > 你不需要考虑数组中超出新长度后面的元素。

### 代码
注意的点：
 - 尽量减少删除数组元素的次数（因为被删除属性后面的每个属性都必须被移除，并且以一个新的键值重新插入，比起改变某个属性的值来说效率不高）
 - 循环中声明局部变量`len`，避免每次循环都计算一次数组的长度
``` js
/**
 * @param {number[]} nums
 * @return {number}
 */
const removeDuplicates = function(nums) {
    if (nums.length == 0 || nums === null) {
        return 0
    }
    let i = 1
    for (let j = 1, len = nums.length; j < len; j++) {
        if (nums[j] != nums [j - 1]) {
            nums[i] = nums[j]
            i++
        }
    }
    return i
}
```
