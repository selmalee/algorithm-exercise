// 题目描述
// 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

// 方案一：与flag做按位与运算。32位的整数需要执行32次。
function NumberOf1(n) {
  let count = 0
  let flag = 1
  while(flag) {
    if (n & flag) { // 按位与，都等于1时为1
      count++
    }
    flag = flag << 1 // flag左移1位，不改变n值
  }
  return count
}

// 方案二：根据一个规律：把一个整数减去1，再和原整数按位与，会把该整数最右边的1变成0，那么一个整数里有多少个1就可以做多少次这样的操作
// function NumberOf1(n) {
//   let count = 0
//   while(n) {
//     n = n & (n - 1)
//     count++
//   }
//   return count
// }


// 相关题目：
// 1. 用一条语句判断一个整数是不是2的整数次方。思路：如果一个整数是2的整数次方，那么它的二进制只有一个1。根据把一个整数减去1，再和原整数按位与，会把该整数最右边的1变成0，那么这个整数会变成0。
// 2. 输入m和n两个整数，计算需要改变m的二进制表示中多少位才能得到n。即找出两个二进制表示中不同的数。第一步求这两个数的异或，第二步计算异或结果中有多少个1。